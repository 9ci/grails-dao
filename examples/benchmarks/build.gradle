
apply plugin:"war"
apply plugin:"org.grails.grails-web"

//Dont cache snapshots so that gradle will download it whenever it changes
configurations.all {
  resolutionStrategy.cacheChangingModulesFor 1, 'seconds'
}

dependencies {
  console "org.grails:grails-console"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-tomcat"

  compile "org.grails:grails-logging"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-plugin-i18n"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-interceptors"

  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:scaffolding"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:gsp"

  profile "org.grails.profiles:web"

  compile "org.grails:grails-async-gpars"
  compile "org.grails:grails-events-gpars"
  // compile 'org.grails.plugins:spring-security-core:3.2.0'

  // runtime "org.glassfish.web:el-impl:2.1.2-b03"

  runtime "com.h2database:h2"
  runtime "com.zaxxer:HikariCP:$vHikari"

  // Required for MySql db
  // runtime 'mysql:mysql-connector-java:5.1.42'
  // runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.6"

  // runtime 'mysql:mysql-connector-java:5.1.5'
  compile project(":gorm-tools")
  compile project(":gorm-tools-security")
  // compile project(":gorm-tools-rest")
  // compile project(":test-domain")
  // compile("org.grails.plugins:audit-trail:3.0.8") //{ changing = true }
  compile 'org.grails.plugins:csv:1.0'

  compile "io.reactivex.rxjava2:rxjava:2.1.6"

  testCompile "org.grails.plugins:geb"
}

//Pass system properties to bootrun tasks, so that it can be used in benchmarks.
// tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
//   systemProperties = System.properties
// }

bootRun {
  ignoreExitValue true
  jvmArgs('-Dspring.output.ansi.enabled=always', '-noverify', '-XX:TieredStopAtLevel=1', '-Xmx1024m')
  sourceResources sourceSets.main
  String springProfilesActive = 'spring.profiles.active'
  systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}
bootWar.archiveFileName = 'benchmarks.war'

// webdriverBinaries {
//     chromedriver '2.32'
//     geckodriver '0.18.0'
// }

// tasks.withType(Test) {
//     systemProperty "geb.env", System.getProperty('geb.env')
//     systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
//     systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
// }
