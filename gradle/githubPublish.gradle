//see https://github.com/ajoberstar/gradle-git-publish for docs

/** Security
 * use a github token especially for for CI and set environment properties GRGIT_USER
 * if using normal login can use GRGIT_USER and GRGIT_PASS or gradle properties
 * the following can also be set in ~./gradle/gradle.properties
 * see http://ajoberstar.org/grgit/grgit-authentication.html
 */
//ext['org.ajoberstar.grgit.auth.username'] = 'enter github token here or user name'
//ext['org.ajoberstar.grgit.auth.username'] = 'enter gpassword or if token used above none is needed'

gitPublish {
    // where to publish to (repo must exist)
    repoUri = "${githubUrl}.git"
    // (or 'git@github.com/ajoberstar/test-repo.git', depending on authentication)

    branch = 'gh-pages' // branch will be created if it doesn't exist

    repoDir = file("$buildDir/gh-pages") // defaults to $buildDir/gitPublish
    // what to publish, this is a standard CopySpec
    contents {
        from "$buildDir/mkdocs/site"
        if(isSnapshot){ //put in own dir and update relative path
            into 'snapshot'
        }

        from(project(':gorm-tools').groovydoc) {
            into 'api'
        }
    }

    // (include=keep) if its a snapshot preserve is all, otherwise wipe it
    preserve {
        if(isSnapshot){
            include "*/**"
            exclude "snapshot"
        }

    }

    // message used when committing changes
    commitMessage = 'doc updates [skip ci]' // defaults to 'Generated by gradle-git-publish'
}

gitPublishCopy.dependsOn mkdocsBuild
gitPublishCopy.mustRunAfter mkdocsBuild
gitPublishCopy.inputs.files project(':gorm-tools').groovydoc //forces the copy task to depend on up to date groovydoc
//gitPublishCommit.dependsOn project(':gorm-tools').groovydoc

