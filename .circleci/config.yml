# circleCI build file
version: 2.1
jobs:
  build:
    docker:
      - image: yakworks/alpine-jdk:builder8
    resource_class: 'medium+'

    steps:
      - checkout

      - run: make cache-key-file
      - restore_cache: &gradle-cache-restore
          key: gradle-{{ checksum "cache-key.tmp" }}

      - run: make resolve-dependencies

      - save_cache:
          paths: [ "~/.m2", "~/.gradle" ]
          key: gradle-{{ checksum "cache-key.tmp" }}

      - run:
          name: ✔︎ -- Test
          command: make check

      # merge test results to store in circle
      - run:
          name: ✔︎ -- Merge Test Results
          when: always
          command: make merge-test-results

      - run:
          name: ✔︎ -- Publish lib if on releasable branch
          command: make publish-release

      - store_test_results:
          path: build/test-results/
      - store_artifacts:
          path: build/reports/
          destination: /
      - save_cache:
          paths: [ ".gradle", "./build", "./commons/build", "./gorm-tools/build", "./gorm-tools-rest/build", "./gorm-tools-security/build", "./rally-domain/build"]
          key: build-{{ .Branch }}-{{ .Revision }}
  docs:
    docker:
      - image: yakworks/docmark
    steps:
      - checkout
      - restore_cache: &build-cache-restore
          key: build-{{ .Branch }}-{{ .Revision }}
      - run: make publish-docs

  publish-restify:
    docker:
      - image: yakworks/alpine-jdk:builder8
    resource_class: 'medium+'
    steps:
      - checkout
      - setup_remote_docker

      - run: make cache-key-file
      - restore_cache: *gradle-cache-restore
      - restore_cache:
          key: build-{{ .Branch }}-{{ .Revision }}

      # install the docker
      - run: apk add docker

      # build the jars
      - run: make build

      - run: make docker-app-build

      - run:
          name: publish docker image
          command: |
            make dockerhub-login
            make docker-app-push

      - run:
          name: kubernetes config and deploy
          command: |
            make kube-config
            make kube-clean
            make kube-deploy

workflows:
  build-flow:
    jobs:
      - build:
          context: bot-context #context with shared ENV vars
      - docs:
          context: bot-context
          requires: [build]
          filters:
            branches: { only: [ master, /release\/.*/ ] }
      - publish-restify:
          context: bot-context
          requires: [build]
          filters:
            branches: { only: [ master, /release\/.*/ ] }
